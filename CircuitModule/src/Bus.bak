/*******************************************************************************
* Copyright (c) 2015-2017
* School of Electrical, Computer and Energy Engineering, Arizona State University
* PI: Prof. Shimeng Yu
* All rights reserved.
* 
* This source code is part of NeuroSim - a device-circuit-algorithm framework to benchmark 
* neuro-inspired architectures with synaptic devices(e.g., SRAM and emerging non-volatile memory). 
* Copyright of the model is maintained by the developers, and the model is distributed under 
* the terms of the Creative Commons Attribution-NonCommercial 4.0 International Public License 
* http://creativecommons.org/licenses/by-nc/4.0/legalcode.
* The source code is free and you can redistribute and/or modify it
* by providing that the following conditions are met:
* 
*  1) Redistributions of source code must retain the above copyright notice,
*     this list of conditions and the following disclaimer.
* 
*  2) Redistributions in binary form must reproduce the above copyright notice,
*     this list of conditions and the following disclaimer in the documentation
*     and/or other materials provided with the distribution.
* 
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
* ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* 
* Developer list: 
*   Pai-Yu Chen	    Email: pchen72 at asu dot edu 
*                    
*   Xiaochen Peng   Email: xpeng15 at asu dot edu
********************************************************************************/

#include <cmath>
#include <iostream>
#include "constant.h"
#include "typedef.h"
#include "formula.h"
#include "Bus.h"
#include "Param.h"

using namespace std;

extern Param *param;

Bus::Bus(const InputParameter& _inputParameter, const Technology& _tech): inputParameter(_inputParameter), tech(_tech), FunctionUnit() {
	initialized = false;
}

void Bus::Initialize(int _numRow, int _numCol, double _delaytolerance, double _busWidth, 
                    double _unitHeight, double _unitWidth, double _foldedratio, double _clkFreq){
	if (initialized)
		cout << "[Bus] Warning: Already initialized!" << endl;
	
	numRow = _numRow;
	numCol = _numCol;     // num of Row and Col in tile/pe level

    unitHeight = _unitHeight;
    unitWidth = _unitWidth;

	delaytolerance = _delaytolerance;
	busWidth = _busWidth;

    foldedratio = _foldedratio;

	clkFreq = _clkFreq;

	numStage = 2*ceil(log2((double) max(numRow, numCol)))+1;   // vertical has N stage, horizontal has N+1 stage
	unitLengthWireResistance = param->unitLengthWireResistance;
	unitLengthWireCap = 0.2e-15/1e-6;;   // 0.2 fF/mm
	
	// define min INV resistance and capacitance to calculate repeater size
	widthMinInvN = MIN_NMOS_SIZE * tech.featureSize;
	widthMinInvP = tech.pnSizeRatio * MIN_NMOS_SIZE * tech.featureSize;
	CalculateGateArea(INV, 1, widthMinInvN, widthMinInvP, tech.featureSize * MAX_TRANSISTOR_HEIGHT, tech, &hMinInv, &wMinInv);
	CalculateGateCapacitance(INV, 1, widthMinInvN, widthMinInvP, hMinInv, tech, &capMinInvInput, &capMinInvOutput);
	double resOnRep = CalculateOnResistance(widthMinInvN, NMOS, inputParameter.temperature, tech) + CalculateOnResistance(widthMinInvP, PMOS, inputParameter.temperature, tech);
	// optimal repeater design to achieve highest speed
	repeaterSize = floor((double)sqrt( (double) resOnRep*unitLengthWireCap/capMinInvInput/unitLengthWireResistance));
	minDist = sqrt(2*resOnRep*(capMinInvOutput+capMinInvInput)/(unitLengthWireResistance*unitLengthWireCap));
	CalculateGateArea(INV, 1, MIN_NMOS_SIZE * tech.featureSize * repeaterSize, tech.pnSizeRatio * MIN_NMOS_SIZE * tech.featureSize * repeaterSize, tech.featureSize * MAX_TRANSISTOR_HEIGHT, tech, &hRep, &wRep);
	CalculateGateCapacitance(INV, 1, MIN_NMOS_SIZE * tech.featureSize * repeaterSize, tech.pnSizeRatio * MIN_NMOS_SIZE * tech.featureSize * repeaterSize, hRep, tech, &capRepInput, &capRepOutput);
	resOnRep = CalculateOnResistance(MIN_NMOS_SIZE * tech.featureSize * repeaterSize, NMOS, inputParameter.temperature, tech) + CalculateOnResistance(tech.pnSizeRatio * MIN_NMOS_SIZE * tech.featureSize * repeaterSize, PMOS, inputParameter.temperature, tech);
	double minUnitLengthDelay = 0.7*(resOnRep*(capRepInput+capRepOutput+unitLengthWireCap*minDist)+0.5*unitLengthWireResistance*minDist*unitLengthWireCap*minDist+unitLengthWireResistance*minDist*capRepInput)/minDist;
	double maxUnitLengthEnergy = (capRepInput+capRepOutput+unitLengthWireCap*minDist)*tech.vdd*tech.vdd/minDist;
	
	if (delaytolerance) {   // tradeoff: increase delay to decrease energy
		double delay = 0;
		double energy = 100;
		while(delay<minUnitLengthDelay*(1+delaytolerance)) {
			repeaterSize /=2;
			minDist *= 0.9;
			CalculateGateArea(INV, 1, MIN_NMOS_SIZE * tech.featureSize * repeaterSize, tech.pnSizeRatio * MIN_NMOS_SIZE * tech.featureSize * repeaterSize, tech.featureSize * MAX_TRANSISTOR_HEIGHT, tech, &hRep, &wRep);
			CalculateGateCapacitance(INV, 1, MIN_NMOS_SIZE * tech.featureSize * repeaterSize, tech.pnSizeRatio * MIN_NMOS_SIZE * tech.featureSize * repeaterSize, hRep, tech, &capRepInput, &capRepOutput);
			resOnRep = CalculateOnResistance(MIN_NMOS_SIZE * tech.featureSize * repeaterSize, NMOS, inputParameter.temperature, tech) + CalculateOnResistance(tech.pnSizeRatio * MIN_NMOS_SIZE * tech.featureSize * repeaterSize, PMOS, inputParameter.temperature, tech);
			delay = 0.7*(resOnRep*(capRepInput+capRepOutput+unitLengthWireCap*minDist)+0.5*unitLengthWireResistance*minDist*unitLengthWireCap*minDist+unitLengthWireResistance*minDist*capRepInput)/minDist;
			energy = (capRepInput+capRepOutput+unitLengthWireCap*minDist)*tech.vdd*tech.vdd/minDist;
		}
	}
	

	widthInvN = repeaterSize * MIN_NMOS_SIZE * tech.featureSize;
	widthInvP = repeaterSize * tech.pnSizeRatio * MIN_NMOS_SIZE * tech.featureSize;
	
	/*** define center point ***/
	x_center = floor(log2((double) min(numRow, numCol)));
	y_center = floor(log2((double) min(numRow, numCol)));
	int orc = 1;    // over-routing constraint: (important for unbalanced tree) avoid routing outside chip boundray
	
	if (numCol-x_center<orc) {
		x_center -= orc;
	}
	if (numRow-y_center<orc) {
		y_center -= orc;
	}  // redefine center point: try to slightly move to the actual chip center
	
	find_stage = 0;   // assume the top stage as find_stage = 0
	hit = 0;
	skipVer = 0;
	
	initialized = true;
}

void Bus::CalculateArea() {
	if (!initialized) {
		cout << "[Bus] Error: Require initialization first!" << endl;
	} else {
		// INV
		CalculateGateArea(INV, 1, widthInvN, widthInvP, tech.featureSize * MAX_TRANSISTOR_HEIGHT, tech, &hInv, &wInv);
		CalculateGateCapacitance(INV, 1, widthInvN, widthInvP, hInv, tech, &capInvInput, &capInvOutput);
		
		area = 0;
		totalWireLength = 0;
		double wireLengthV = unitHeight*pow(2, (numStage-1)/2);   // first vertical stage
		double wireLengthH = unitWidth*pow(2, (numStage-1)/2);    // first horizontal stage (despite of main bus)
		double wireWidV, wireWidH = 0;
		double numRepeater = 0;
		double wireWidth, unitLengthWireResistance;
        int numBranchV, numBranchH = 1;

        for ( int i = 1; i < numStage - 1; i++ ) { // start from center point, ignore last stage
            if ( i % 2 == 0 ) { /*** vertical stage ***/
			    wireLengthV /= 2;   // wire length /2 
			    wireWidth, unitLengthWireResistance = GetUnitLengthRes(wireLengthV);
			    numRepeater = busWidth * ceil(wireLengthV/minDist);
                wireWidV = busWidth * wireWidth * 1e-9 * 2; // 2x for wire spacing
                // update area & totalWireLength
			    area += ( hInv * wInv * numRepeater + wireWidV * wireLengthV ) * numBranchH * numBranchV;
			    totalWireLength += wireLengthV * numBranchH * numBranchV;
                // update numBranch
                numBranchV += 1;
            } else { /*** horizontal stage ***/
			    wireLengthH /= 2;   // wire length /2 
			    wireWidth, unitLengthWireResistance = GetUnitLengthRes(wireLengthH);
			    numRepeater = busWidth * ceil(wireLengthH/minDist);
                wireWidH = busWidth * wireWidth * 1e-9 * 2; // 2x for wire spacing
                // update area & totalWireLength
			    area += ( hInv * wInv * numRepeater + wireWidH * wireLengthH ) * numBranchH * numBranchV;
			    totalWireLength += wireLengthH * numBranchH * numBranchV;
                // update numBranch
                numBranchH += 1;
            }
        }

        double wireLengthMain = min(numCol-x_center,x_center)*unitWidth; // main bus: find the way nearest to the boundray as source
        wireWidth, unitLengthWireResistance = GetUnitLengthRes(wireLengthMain);
		totalWireLength += wireLengthMain;
		numRepeater = ceil(wireLengthMain/minDist);
		//area += (busWidth*hInv/foldedratio)*min(numCol-x_center, x_center)*unitWidth;   
		area += hInv * wInv * numRepeater + (busWidth*wireWidth*1e-9)*wireLengthMain;   // main bus: find the way nearest to the boundray as source
	}
}

void Bus::CalculateLatency(double numRead){
	if (!initialized) {
		cout << "[Bus] Error: Require initialization first!" << endl;
	} else {
		readLatency = 0;
		
		double wireLengthV = unitHeight*pow(2, (numStage-1)/2);   // first vertical stage
		double wireLengthH = unitWidth*pow(2, (numStage-1)/2);    // first horizontal stage (despite of main bus)
		double numRepeater = 0;
		double resOnRep = CalculateOnResistance(widthInvN, NMOS, inputParameter.temperature, tech) + CalculateOnResistance(widthInvP, PMOS, inputParameter.temperature, tech);
		
        //////DICE debugging
        //printf("unitHeight: %10.4e, unitWidth: %10.4e\n", unitHeight, unitWidth);
        //printf("numStage: %10.1f\n", numStage);
		for (int i=0; i<(numStage-1)/2; i++) {                     // ignore main bus here, but need to count until last stage (diff from area calculation)
			double wireWidth, unitLengthWireResistance;
		
			/*** vertical stage ***/
			wireLengthV /= 2;   // wire length /2 
			wireWidth, unitLengthWireResistance = GetUnitLengthRes(wireLengthV);
			unitLatencyRep = 0.7*(resOnRep*(capInvInput+capInvOutput+unitLengthWireCap*minDist)+0.5*unitLengthWireResistance*minDist*unitLengthWireCap*minDist+unitLengthWireResistance*minDist*capInvInput)/minDist;
			unitLatencyWire = 0.7*unitLengthWireResistance*minDist*unitLengthWireCap*minDist/minDist;
			numRepeater = ceil(wireLengthV/minDist);
			if (numRepeater > 0) {
				readLatency += wireLengthV*unitLatencyRep;
			} else {
				readLatency += wireLengthV*unitLatencyWire;
			}
			
			/*** horizontal stage ***/
			wireLengthH /= 2;   // wire length /2 
			wireWidth, unitLengthWireResistance = GetUnitLengthRes(wireLengthH);
			unitLatencyRep = 0.7*(resOnRep*(capInvInput+capInvOutput+unitLengthWireCap*minDist)+0.5*unitLengthWireResistance*minDist*unitLengthWireCap*minDist+unitLengthWireResistance*minDist*capInvInput)/minDist;
			unitLatencyWire = 0.7*unitLengthWireResistance*minDist*unitLengthWireCap*minDist/minDist;
			numRepeater = ceil(wireLengthH/minDist);
			if (numRepeater > 0) {
				readLatency += wireLengthH*unitLatencyRep;
			} else {
				readLatency += wireLengthH*unitLatencyWire;
			}
		}
		/*** main bus ***/
		readLatency += min(numCol-x_center, x_center)*unitWidth*unitLatencyRep;
		
		if (param->synchronous) {
			readLatency = ceil(readLatency*clkFreq);
            //printf("Bus unit latency: %15.4e \n", readLatency);
		}
		readLatency *= numRead; 	
	}
}

void Bus::CalculatePower(double numBitAccess, double numRead) {
	if (!initialized) {
		cout << "[Bus] Error: Require initialization first!" << endl;
	} else {
		leakage = 0;
		readDynamicEnergy = 0;
		
		unitLengthLeakage = CalculateGateLeakage(INV, 1, widthInvN, widthInvP, inputParameter.temperature, tech) * tech.vdd / minDist;
		leakage = unitLengthLeakage * totalWireLength;
		unitLengthEnergyRep = (capInvInput+capInvOutput+unitLengthWireCap*minDist)*tech.vdd*tech.vdd/minDist*0.25;
		unitLengthEnergyWire = (unitLengthWireCap*minDist)*tech.vdd*tech.vdd/minDist*0.25;
		double wireLengthV = unitHeight*pow(2, (numStage-1)/2)/2;   // first vertical stage
		double wireLengthH = unitWidth*pow(2, (numStage-1)/2)/2;    // first horizontal stage (despite of main bus)
		
		for (int i=0; i<(numStage-1)/2; i++) {                     // ignore main bus here, but need to count until last stage (diff from area calculation)
			/*** vertical stage ***/
			wireLengthV /= 2;   // wire length /2 
			numRepeater = ceil(wireLengthV/minDist);
			if (numRepeater > 0) {
				readDynamicEnergy += wireLengthV*unitLengthEnergyRep;
			} else {
				readDynamicEnergy += wireLengthV*unitLengthEnergyWire;
			}
			/*** horizontal stage ***/
			wireLengthH /= 2;   // wire length /2 
			numRepeater = ceil(wireLengthH/minDist);
			if (numRepeater > 0) {
				readDynamicEnergy += wireLengthH*unitLengthEnergyRep;
			} else {
				readDynamicEnergy += wireLengthH*unitLengthEnergyWire;
			}
		}
		/*** main bus ***/
		readDynamicEnergy += min(numCol-x_center, x_center)*unitWidth*unitLengthEnergyRep;

		readDynamicEnergy *= numBitAccess;  
		readDynamicEnergy *= numRead;
	}
}

void Bus::PrintProperty(const char* str) {
	FunctionUnit::PrintProperty(str);
}

double Bus::GetUnitLengthRes(double wireLength) {
	double wireWidth, AR, Rho, unitLengthWireResistance, wireResistance;

	//if (wireLength/tech.featureSize >= 100000) {
	//	wireWidth = 4*param->wireWidth;
	//} else if (10000 <= wireLength/tech.featureSize <= 100000) {
	//	wireWidth = 2*param->wireWidth;
	//} else {
	//	wireWidth = 1*param->wireWidth;
	//}
    wireWidth = param->wireWidth; //DICE: uniform wireWidth for H-Tree bus
	
	if (wireWidth >= 175) {
		AR = 1.6; 
		Rho = 2.20e-8;
	} else if (110 <= wireWidth < 175) {
		AR = 1.6; 
		Rho = 2.52e-8;
	} else if (105 <= wireWidth < 110) {
		AR = 1.7; 
		Rho = 2.68e-8;
	} else if (80 <= wireWidth < 105) {
		AR = 1.7; 
		Rho = 3.31e-8;
	} else if (56 <= wireWidth < 80) {
		AR = 1.8; 
		Rho = 3.70e-8;
	} else if (40 <= wireWidth < 56) {
		AR = 1.9; 
		Rho = 4.03e-8;
	} else if (25 <= wireWidth < 40) {
		AR = 2.0; 
		Rho = 5.08e-8;
	}else {
		AR = 2.0;
		Rho = 6.35e-8;
	} 
	Rho *= (1+0.00451*(param->temp-300));
	if (wireWidth == -1) {
		unitLengthWireResistance = 1.0;	// Use a small number to prevent numerical error for NeuroSim
	} else {
		unitLengthWireResistance =  Rho / ( wireWidth*1e-9 * wireWidth*1e-9 * AR );
	}
	
	return wireWidth, unitLengthWireResistance;
}


